{"version":3,"sources":["left.svg","send.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","element","sectionRef","useRef","intersection","useIntersection","root","rootMargin","threshold","intersectionRatio","gsap","to","opacity","y","ease","stagger","amount","fadeIn","className","src","back","alt","send","ref","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,wMCkG5BC,G,MA3FH,WAEV,IAoBgBC,EApBVC,EAAaC,iBAAO,MAEpBC,EAAeC,YAAgBH,EAAY,CAC/CI,KAAM,KACNC,WAAY,MACZC,UAAW,KA4Bb,OAJAJ,GAAgBA,EAAaK,kBAAoB,IATjCR,EAUJ,UATVS,IAAKC,GAAGV,EAAS,EAAG,CAClBW,QAAS,EACTC,GAAI,GACJC,KAAM,gBAfK,SAAAb,GACbS,IAAKC,GAAGV,EAAS,EAAG,CAClBW,QAAS,EACTC,GAAI,GACJC,KAAM,aACNC,QAAS,CACPC,OAAQ,MAgBVC,CAAO,WAGT,oCACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,UACb,yBAAKC,IAAKC,IAAMC,IAAI,gBAEtB,qCACA,yBAAKH,UAAU,UACb,yBAAKC,IAAKG,IAAMD,IAAI,OAGxB,yBAAKH,UAAU,gBACb,yBAAKA,UAAU,OACb,yBACEC,IAAI,uGACJE,IAAI,MAGR,2CACA,kcAUF,yBAAKH,UAAU,iBACb,yBAAKK,IAAKrB,EAAYgB,UAAU,SAC9B,wBAAIA,UAAU,UAAd,sCACA,uBAAGA,UAAU,UAAb,+0BAeA,yBAAKA,UAAU,kBACb,uBAAGM,KAAK,KAAR,yBC9EQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.61153e26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/left.9970a637.svg\";","module.exports = __webpack_public_path__ + \"static/media/send.38268076.svg\";","import React, { useRef } from \"react\";\nimport { useIntersection } from \"react-use\";\nimport back from \"./left.svg\";\nimport send from \"./send.svg\";\nimport gsap from \"gsap\";\nimport \"./App.scss\";\n\nconst App = () => {\n  // Ref for our element\n  const sectionRef = useRef(null);\n  // All the ref to be observed\n  const intersection = useIntersection(sectionRef, {\n    root: null,\n    rootMargin: \"0px\",\n    threshold: 0.2\n  });\n\n  // Animation for fading in\n  const fadeIn = element => {\n    gsap.to(element, 1, {\n      opacity: 1,\n      y: -60,\n      ease: \"power4.out\",\n      stagger: {\n        amount: 0.3\n      }\n    });\n  };\n  // Animation for fading out\n  const fadeOut = element => {\n    gsap.to(element, 1, {\n      opacity: 0,\n      y: -20,\n      ease: \"power4.out\"\n    });\n  };\n\n  // checking to see when the vieport is visible to the user\n  intersection && intersection.intersectionRatio < 0.2\n    ? fadeOut(\".fadeIn\")\n    : fadeIn(\".fadeIn\");\n\n  return (\n    <>\n      <div className='header'>\n        <div className='sm-btn'>\n          <img src={back} alt='back arrow' />\n        </div>\n        <h5>About</h5>\n        <div className='sm-btn'>\n          <img src={send} alt='' />\n        </div>\n      </div>\n      <div className='sectionFirst'>\n        <div className='pic'>\n          <img\n            src='https://cdn.dribbble.com/users/997665/screenshots/9634478/media/8ad68f67fdbfb09bc054937edecf2d27.png'\n            alt=''\n          />\n        </div>\n        <h3>Alara Frank</h3>\n        <p>\n          Massa id neque aliquam vestibulum. Nibh praesent tristique magna sit.\n          Auctor eu augue ut lectus arcu bibendum at varius. Nam aliquam sem et\n          tortor consequat id. Nunc mi ipsum faucibus vitae aliquet nec. Eu\n          consequat ac felis donec et. Vivamus arcu felis bibendum ut tristique.\n          Egestas diam in arcu cursus euismod quis viverra nibh. Donec ac odio\n          tempor orci dapibus ultrices in iaculis. Enim eu turpis egestas\n          pretium.\n        </p>\n      </div>\n      <div className='sectionSecond'>\n        <div ref={sectionRef} className='inner'>\n          <h3 className='fadeIn'>The talk of what makes a champion.</h3>\n          <p className='fadeIn'>\n            Massa id neque aliquam vestibulum. Nibh praesent tristique magna\n            sit. Auctor eu augue ut lectus arcu bibendum at varius. Nam aliquam\n            sem et tortor consequat id. Nunc mi ipsum faucibus vitae aliquet\n            nec. Eu consequat ac felis donec et. Vivamus arcu felis bibendum ut\n            tristique. Egestas diam in arcu cursus euismod quis viverra nibh.\n            Donec ac odio tempor orci dapibus ultrices in iaculis. Enim eu\n            turpis egestas pretium. Tortor vitae purus faucibus ornare\n            suspendisse sed nisi lacus sed. Eget nulla facilisi etiam dignissim\n            diam quis enim lobortis. Enim sit amet venenatis urna cursus eget.\n            Tellus id interdum velit laoreet id. Ac odio tempor orci dapibus. Et\n            ultrices neque ornare aenean euismod elementum nisi. Dolor morbi non\n            arcu risus quis. Lectus sit amet est placerat in egestas erat\n            imperdiet. Cum sociis natoque penatibus et magnis dis.\n          </p>\n          <div className='btn-row fadeIn'>\n            <a href='/'>Click here bruh</a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}